#include "lib/define_sensor.h"
#include "lib/debug.h"
#include "lib/gaussinan.nxc"

#define LOOP_TIME 5  // [mSeconds]How long do we wait in the loop
#define LOOP_GUESS 15 // mSec ..how long run loop without waiting
#define dT ((LOOP_TIME + LOOP_GUESS) / 1000.0)  // dT [sec]
#define KC 50  // Critical value
#define PC 0.5 // Oscilation Period
#define P_GUESS 0
#define I_GUESS -2.35
#define D_GUESS -40.0
#define P ((0.6*KC) + P_GUESS )
#define I ((2*(P*(dT/PC))) + I_GUESS)
#define D (((0.125*(P*PC))/dT) + D_GUESS)


int a[1000];
float mid;

float getMid(int n)
{
  int sum = 0;
  for(int i=1;i<=n;i++)
    sum += a[i];
  mid = sum/n;
}
bool is_obstacol(int x)
{
  if(x < mid)
    return 1;
  return 0;
}

task main()  {

  int valCurrent;
  int i = 0;
  short bytesWritten, bt ;
  byte fileHandle, dataHandle;

  string write;
  DeleteFile("sensor.dat");
  CreateFile("sensor.dat",200, fileHandle);
  SetSensorLowspeed(IN_2);
  while(1)
  {


    if(i==30)
      i=0;
    valCurrent = SensorUS(IN_2);
    write = NumToStr(valCurrent);
    WriteLnString(fileHandle, write,bt);
    a[++i] = valCurrent;
    getMid(i);

    gaussianiir1d(a,i,0.447,i);
    ClearScreen();

    showInt(valCurrent, LCD_LINE2);
    showInt(i, LCD_LINE3);
    if(is_obstacol(valCurrent))
    {

      OnFwd(OUT_BC,-100);

    }
    else
    {
      OnFwd(OUT_C,100);
      OnFwd(OUT_B,-100);
    }



    }
  DeleteFile("blur.dat");
  CreateFile("blur.dat",200, fileHandle);
  for(int j=1;j<=i;j++)
  {

    write = NumToStr(a[j]);
    WriteLnString(fileHandle, write,bytesWritten);
    PlayTone(440, 100);


  }
}
