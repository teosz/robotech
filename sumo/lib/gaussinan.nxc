
void gaussianiir1d(int &data[], long length, float sigma, int numsteps)
{
    float lambda, dnu;
    float nu, boundaryscale, postscale;
    long i;
    int step;

    /*if(!data || length < 1 || sigma <= 0 || numsteps < 0)
        return;*/

    lambda = (sigma*sigma)/(2.0*numsteps);
    dnu = (1.0 + 2.0*lambda - sqrt(1.0 + 4.0*lambda))/(2.0*lambda);
    nu = dnu;
    boundaryscale = 1.0/(1.0 - dnu);

    postscale = pow(dnu/lambda,numsteps);
    for(step = 0; step < numsteps; step++)
    {
        data[0] *= boundaryscale;

        for(i = 1; i < length; i++)
            data[i] += nu * data[i - 1];

        data[i = length - 1] *= boundaryscale;

        /* Filter leftwards (anti-causal) */
        for(; i > 0; i--)
            data[i - 1] += nu*data[i];
    }

    for(i = 0; i < length; i++)
        data[i] *= postscale;

    return;
}
